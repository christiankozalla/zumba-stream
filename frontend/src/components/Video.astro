---
const { videoLarge, videoSmall } = Astro.props;
---

<div class="video__container">
{ videoLarge &&
(<video class="video-large lazy" preload="none" width="800" controls poster={ videoLarge.img }>
    <source data-src={ videoLarge.src } type="video/mp4">
    Your browser does not support the video tag.
  </video>
)
}
{ videoSmall &&
(<video class="video-small lazy" preload="none" width="800" controls poster={ videoSmall.img }>
    <source data-src={ videoSmall.src } type="video/mp4">
    Your browser does not support the video tag.
  </video>)
}
</div>

<style>

.video__container {
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 0 auto;
}

.video-large,
.video-small {
    border-radius: var(--border-radius);
}

.video-small {
  display: flex;
}

.video-large {
  display: none;
}


@media only screen and (min-width: 40em) {
  .video__container {
    padding: 2em;
    max-width: 1200px;
  }
}

@media only screen and (min-width: 50em) {
  .video-large {
    display: unset;
  }

  .video-small {
    display: none;
  }
}

@media only screen and (min-width: 60em) {
  .video__container {
    padding: 0;
  }
}

</style>

<script is:inline>
	document.addEventListener("DOMContentLoaded", function() {
		var lazyVideos = [].slice.call(document.querySelectorAll("video.lazy"));

		if ("IntersectionObserver" in window) {
			var lazyVideoObserver = new IntersectionObserver(function(entries, observer) {
				entries.forEach(function(video) {
					if (video.isIntersecting) {
						for (var source in video.target.children) {
							var videoSource = video.target.children[source];
							if (typeof videoSource.tagName === "string" && videoSource.tagName === "SOURCE") {
								videoSource.src = videoSource.dataset.src;
							}
						}

						video.target.load();
						video.target.classList.remove("lazy");
						lazyVideoObserver.unobserve(video.target);
					}
				});
			});

			lazyVideos.forEach(function(lazyVideo) {
				lazyVideoObserver.observe(lazyVideo);
			});
		}
	});
</script>