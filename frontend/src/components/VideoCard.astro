---
const { teaserText, videoLarge, videoSmall, heading, text, img, link } = Astro.props;

---
<h5 class="video-card__teaser">{ teaserText }</h5>
<div class="video-card__container">
    { videoLarge &&
        (<video class="video-large lazy" preload="none" width="800" controls poster={ videoLarge.img }>
            <source data-src={ videoLarge.src } type="video/mp4">
            Your browser does not support the video tag.
          </video>)
        }
        { videoSmall &&
        (<video class="video-small lazy" preload="none" width="800" controls poster={ videoSmall.img }>
            <source data-src={ videoSmall.src } type="video/mp4">
            Your browser does not support the video tag.
          </video>)
        }
    <h4 class="video-card__heading">{ heading }</h4>
    <p class="video-card__text">{ text }</p>
    {img &&
    (<img class="video-card__icon" src={ img.src } alt={ img.alt } width="50"/>)
    }
    <a class="link" href={ link }>Jetzt mit dem 1. Video loslegen</a>
</div>

<style>
.video-card__teaser {
    padding: 0 1.2em;
}

.video-card__container {
    border-radius: var(--border-radius);
    box-shadow: 12px 16px 20px #F6F7F8;
    padding: 1.8em;
    background-color: #fff;
    position: relative;
    margin: 1em 0 2em 0;
}

.video-card__video {
    margin-bottom: 0.4em;
    border-radius: var(--border-radius);
}

.video-card__text {
    font-size: var(--fs-300);
}

.video-card__icon {
    margin-left: auto;
    align-self: flex-end;
    display: flex;
    position: absolute;
    top: 0;
    left: 0;
    margin: 0.4em;
}

.video-large,
.video-small {
    border-radius: var(--border-radius);
}

.video-small {
  display: flex;
}

.video-large {
  display: none;
}

@media only screen and (min-width: 50em) {
  .video-large {
    display: unset;
  }

  .video-small {
    display: none;
  }
}

</style>

<script>
	document.addEventListener("DOMContentLoaded", function() {
		var lazyVideos = [].slice.call(document.querySelectorAll("video.lazy")) as HTMLElement[];

		if ("IntersectionObserver" in window) {
			var lazyVideoObserver = new IntersectionObserver(function(entries, observer) {
				entries.forEach(function(video) {
					if (video.isIntersecting) {
						for (var source in video.target.children) {
							var videoSource = video.target.children[source] as HTMLSourceElement;
							if (typeof videoSource.tagName === "string" && videoSource.tagName === "SOURCE") {
								videoSource.src = videoSource.dataset.src;
							}
						}

						(video.target as HTMLVideoElement).load();
						video.target.classList.remove("lazy");
						lazyVideoObserver.unobserve(video.target);
					}
				});
			});

			lazyVideos.forEach(function(lazyVideo) {
				lazyVideoObserver.observe(lazyVideo);
			});
		}
	});
</script>